class LightScheduleManager{constructor(){this.checkInterval=null,this.init()}init(){this.startScheduleMonitoring(),this.setupEventListeners(),this.setupModeChangeListener()}setupModeChangeListener(){document.addEventListener("modeChanged",(e=>{"manual"===e.detail.mode?this.clearScheduleIndicators():"auto"===e.detail.mode&&setTimeout((()=>this.checkSchedules()),1e3)}))}startScheduleMonitoring(){this.checkInterval=setInterval((()=>{this.checkSchedules()}),12e4),setTimeout((()=>{this.checkSchedules()}),5e3)}async checkSchedules(){try{const e=await fetch("/api/check-schedules",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').getAttribute("content")}});if(e.ok){const t=await e.json();this.lastResponse=t,!t.success||t.manual_mode||t.overtime_active?t.manual_mode?this.clearScheduleIndicators():t.overtime_active&&(this.clearScheduleIndicators(),this.addOvertimeIndicators()):(this.updateDeviceStatus(t.active_devices,t.inactive_devices),this.showScheduleNotification(t))}}catch(e){}}updateDeviceStatus(e,t){if(this.lastResponse&&(this.lastResponse.manual_mode||this.lastResponse.overtime_active))return;document.querySelectorAll(".device-switch").forEach((i=>{const s=i.getAttribute("name");e.includes(s)?(i.checked=!0,this.addScheduleIndicator(i,"active")):t.includes(s)&&(i.checked=!1,this.addScheduleIndicator(i,"inactive"))}))}addScheduleIndicator(e,t){const i=e.closest(".card");if(i){const e=i.querySelector(".schedule-indicator");e&&e.remove();const s=document.createElement("div");s.className="schedule-indicator badge "+("active"===t?"bg-success":"bg-secondary"),s.innerHTML='<i class="fa fa-clock"></i> Scheduled '+("active"===t?"ON":"OFF"),s.style.position="absolute",s.style.top="10px",s.style.right="10px",s.style.fontSize="0.75rem",i.style.position="relative",i.appendChild(s)}}clearScheduleIndicators(){document.querySelectorAll(".schedule-indicator").forEach((e=>e.remove()))}addOvertimeIndicators(){document.querySelectorAll(".device-control-card").forEach((e=>{const t=e.querySelector(".schedule-indicator");t&&t.remove();const i=document.createElement("div");i.className="schedule-indicator badge bg-warning",i.innerHTML='<i class="fa fa-briefcase"></i> Overtime Active',i.style.position="absolute",i.style.top="10px",i.style.right="10px",i.style.fontSize="0.75rem",e.style.position="relative",e.appendChild(i)}))}showScheduleNotification(e){if(e.overtime_active)this.showToast("Overtime is active - devices controlled by overtime system","warning");else if(e.active_devices.length>0||e.inactive_devices.length>0){const t=`Schedule executed: ${e.active_devices.length} device(s) turned ON, ${e.inactive_devices.length} device(s) turned OFF`;this.showToast(t,"info")}}showToast(e,t="info"){const i=document.createElement("div");i.className=`toast align-items-center text-white bg-${"info"===t?"primary":t} border-0`,i.style.position="fixed",i.style.top="20px",i.style.right="20px",i.style.zIndex="9999",i.setAttribute("role","alert"),i.setAttribute("aria-live","assertive"),i.setAttribute("aria-atomic","true"),i.innerHTML=`\n            <div class="d-flex">\n                <div class="toast-body">\n                    <i class="fa fa-clock me-2"></i>${e}\n                </div>\n                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>\n            </div>\n        `,document.body.appendChild(i);new bootstrap.Toast(i,{autohide:!0,delay:5e3}).show(),i.addEventListener("hidden.bs.toast",(()=>{i.remove()}))}setupEventListeners(){const e=document.getElementById("manual-schedule-check");e&&e.addEventListener("click",(()=>{this.checkSchedules()})),document.addEventListener("click",(e=>{if(e.target.classList.contains("device-switch")){const t=e.target.closest(".card").querySelector(".schedule-indicator");if(t&&t.textContent.includes("Scheduled"))return e.preventDefault(),this.showToast("This device is currently controlled by a schedule. Disable the schedule to control manually.","warning"),!1}}))}stopScheduleMonitoring(){this.checkInterval&&(clearInterval(this.checkInterval),this.checkInterval=null)}async executeScheduleManually(){await this.checkSchedules()}}document.addEventListener("DOMContentLoaded",(function(){window.lightScheduleManager=new LightScheduleManager})),"undefined"!=typeof module&&module.exports&&(module.exports=LightScheduleManager);class PerformanceOptimizer{constructor(){this.intervals=new Set,this.timeouts=new Set,this.isPageVisible=!document.hidden,this.init()}init(){this.overrideTimers(),this.setupVisibilityHandlers(),this.setupMemoryOptimization()}overrideTimers(){const e=window.setInterval,t=window.setTimeout,i=window.clearInterval,s=window.clearTimeout;window.setInterval=(t,i,...s)=>{const n=e(t,i,...s);return this.intervals.add(n),n},window.setTimeout=(e,i,...s)=>{const n=t(e,i,...s);return this.timeouts.add(n),n},window.clearInterval=e=>(this.intervals.delete(e),i(e)),window.clearTimeout=e=>(this.timeouts.delete(e),s(e))}setupVisibilityHandlers(){document.addEventListener("visibilitychange",(()=>{this.isPageVisible=!document.hidden,this.isPageVisible?this.resumeOperations():this.pauseNonCriticalOperations()})),window.addEventListener("beforeunload",(()=>{this.cleanup()}))}setupMemoryOptimization(){"requestIdleCallback"in window&&requestIdleCallback((()=>{this.optimizeMemory()})),setInterval((()=>{this.isPageVisible&&this.optimizeMemory()}),3e5)}pauseNonCriticalOperations(){}resumeOperations(){}optimizeMemory(){window.gc&&window.gc(),this.cleanupOrphanedTimers()}cleanupOrphanedTimers(){document.querySelectorAll("*").length}cleanup(){this.intervals.forEach((e=>clearInterval(e))),this.timeouts.forEach((e=>clearTimeout(e))),this.intervals.clear(),this.timeouts.clear()}}window.performanceOptimizer||(window.performanceOptimizer=new PerformanceOptimizer);
