/**
 * PZEM Monitoring and CCTV Management Script
 * Combined from fetch-api-monitoring.js and CCTV-logic.js
 * Handles real-time sensor data fetching and camera management
 */

// =====================================
// PZEM DATA MONITORING FUNCTIONS
// =====================================

/**
 * Fetch PZEM sensor data and relay status from Firebase
 * Updates the dashboard with voltage, current, power, and total power consumption
 */
function fetchPZEMAndRelayData() {
    Promise.all([
        fetch('https://smart-building-3e5c1-default-rtdb.asia-southeast1.firebasedatabase.app/sensor.json').then(response => response.json()),
        fetch('https://smart-building-3e5c1-default-rtdb.asia-southeast1.firebasedatabase.app/relayControl.json').then(response => response.json())
    ])
        .then(([sensorData, relayData]) => {
            // Extract sensor values with fallback to 0
            const voltage = sensorData?.voltage ?? 0;
            const current = sensorData?.current ?? 0;
            const power = sensorData?.power ?? 0;

            // Calculate additional power consumption from active relays
            // Each relay consumes 9W when active
            let relayPower = 0;
            if (relayData?.relay1 == 1) relayPower += 9;
            if (relayData?.relay2 == 1) relayPower += 9;

            // Calculate total power consumption
            const totalPower = power + relayPower;

            // Update DOM elements with sensor readings
            document.getElementById('pzem-voltage').innerText = `${voltage.toFixed(1)} V`;
            document.getElementById('pzem-current').innerText = `${current.toFixed(2)} A`;
            document.getElementById('pzem-power').innerText = `${power.toFixed(2)} W`;
            document.getElementById('total-listrik').innerText = `${totalPower.toFixed(2)} W`;
        })
        .catch(error => {
            console.error('Error fetching PZEM data:', error);
        });
}

// Initial data fetch
fetchPZEMAndRelayData();

// =====================================
// MONITORING CONTROL FUNCTIONS
// =====================================

let monitoringInterval = null;
let isMonitoringActive = false;

/**
 * Start periodic monitoring of PZEM data
 * Fetches data every 5 seconds
 */
function startMonitoring() {
    if (!isMonitoringActive) {
        isMonitoringActive = true;
        monitoringInterval = setInterval(fetchPZEMAndRelayData, 5000);
        console.log('PZEM monitoring started');
    }
}

/**
 * Stop periodic monitoring of PZEM data
 */
function stopMonitoring() {
    if (monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = null;
        isMonitoringActive = false;
        console.log('PZEM monitoring stopped');
    }
}

// =====================================
// PAGE VISIBILITY HANDLERS
// =====================================

// Pause monitoring when page is hidden to save resources
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        stopMonitoring();
    } else {
        startMonitoring();
    }
});

// Clean up intervals when page is unloaded
window.addEventListener('beforeunload', stopMonitoring);

// Start monitoring when script loads
startMonitoring();

// =====================================
// CCTV AND TIMESTAMP MANAGEMENT
// =====================================

document.addEventListener('DOMContentLoaded', () => {
    const timestampElement = document.getElementById('current-timestamp');

    /**
     * Update the current timestamp display
     * Shows current date and time in Indonesian format
     */
    const updateTimestamp = () => {
        if (timestampElement) {
            timestampElement.textContent = new Date().toLocaleString('id-ID', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false
            });
        }
    };

    /**
     * Update camera status indicator
     * @param {string} cameraId - The camera ID
     * @param {string} status - The status ('online' or 'offline')
     */
    const updateCameraStatus = (cameraId, status) => {
        const statusElement = document.getElementById(`status-${cameraId}`);
        if (statusElement) {
            statusElement.className = `status-indicator ${status === 'offline' ? 'offline' : ''}`;
        }
    };

    /**
     * Refresh a specific camera by updating its source with a timestamp
     * @param {string} cameraId - The camera ID to refresh
     */
    const refreshCamera = (cameraId) => {
        const cameraImg = document.getElementById(`camera-${cameraId}`);
        const loadingOverlay = document.getElementById(`loading-${cameraId}`);

        if (!cameraImg || !loadingOverlay) return;

        // Show loading overlay
        loadingOverlay.style.display = 'flex';

        // Add timestamp to prevent caching
        const newSrc = cameraImg.src.split('?')[0] + '?t=' + Date.now();

        // Handle successful load
        cameraImg.addEventListener('load', () => {
            loadingOverlay.style.display = 'none';
            updateCameraStatus(cameraId, 'online');

            // Ensure image fits properly within container
            cameraImg.style.width = '100%';
            cameraImg.style.height = '100%';
            cameraImg.style.objectFit = 'contain';
        }, { once: true });

        // Handle load error
        cameraImg.addEventListener('error', () => {
            loadingOverlay.style.display = 'none';
            updateCameraStatus(cameraId, 'offline');
        }, { once: true });

        // Trigger refresh
        cameraImg.src = newSrc;
    };

    /**
     * Refresh all cameras on the page
     */
    const refreshAllCameras = () => {
        document.querySelectorAll('[id^="camera-"]').forEach(cameraElement => {
            const cameraId = cameraElement.id.replace('camera-', '');
            refreshCamera(cameraId);
        });
    };

    /**
     * Ensure all camera images are properly sized for their containers
     */
    const resizeCameraImages = () => {
        document.querySelectorAll('[id^="camera-"]').forEach(cameraImg => {
            cameraImg.style.width = '100%';
            cameraImg.style.height = '100%';
            cameraImg.style.objectFit = 'contain';
            cameraImg.style.maxWidth = '100%';
            cameraImg.style.maxHeight = '100%';
        });
    };

    // =====================================
    // INTERVAL MANAGEMENT
    // =====================================

    // Update timestamp every second
    let timestampInterval = setInterval(updateTimestamp, 1000);

    // Refresh cameras every minute
    let cameraRefreshInterval = setInterval(refreshAllCameras, 60000);

    // Handle page visibility changes for CCTV intervals
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            // Clear intervals when page is hidden
            clearInterval(timestampInterval);
            clearInterval(cameraRefreshInterval);
        } else {
            // Restart intervals when page becomes visible
            timestampInterval = setInterval(updateTimestamp, 1000);
            cameraRefreshInterval = setInterval(refreshAllCameras, 60000);
        }
    });

    // Clean up intervals on page unload
    window.addEventListener('beforeunload', () => {
        clearInterval(timestampInterval);
        clearInterval(cameraRefreshInterval);
    });

    // Handle window resize to adjust camera image sizes
    window.addEventListener('resize', resizeCameraImages);

    // =====================================
    // INITIALIZATION
    // =====================================

    // Initial timestamp update
    updateTimestamp();

    // Initial image sizing
    resizeCameraImages();

    // Set up initial camera status listeners
    document.querySelectorAll('[id^="camera-"]').forEach(cameraElement => {
        const cameraId = cameraElement.id.replace('camera-', '');

        cameraElement.addEventListener('load', () => {
            updateCameraStatus(cameraId, 'online');
            // Ensure proper sizing after load
            cameraElement.style.width = '100%';
            cameraElement.style.height = '100%';
            cameraElement.style.objectFit = 'contain';
        });
        cameraElement.addEventListener('error', () => updateCameraStatus(cameraId, 'offline'));
    });

    // Export refresh function globally for manual use
    window.refreshAllCameras = refreshAllCameras;

    console.log('CCTV and timestamp management initialized');
});
