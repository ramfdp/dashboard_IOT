function fetchPZEMAndRelayData() { Promise.all([fetch("https://smart-building-3e5c1-default-rtdb.asia-southeast1.firebasedatabase.app/sensor.json").then((e => e.json())), fetch("https://smart-building-3e5c1-default-rtdb.asia-southeast1.firebasedatabase.app/relayControl.json").then((e => e.json()))]).then((([e, t]) => { const a = e?.voltage ?? 0, n = e?.current ?? 0, i = e?.power ?? 0; let r = 0; 1 == t?.relay1 && (r += 9), 1 == t?.relay2 && (r += 9); const s = i + r; document.getElementById("pzem-voltage").innerText = `${a.toFixed(1)} V`, document.getElementById("pzem-current").innerText = `${n.toFixed(2)} A`, document.getElementById("pzem-power").innerText = `${i.toFixed(2)} W`, document.getElementById("total-listrik").innerText = `${s.toFixed(2)} W` })).catch((e => { })) } fetchPZEMAndRelayData(); let monitoringInterval = null, isMonitoringActive = !1; function startMonitoring() { isMonitoringActive || (isMonitoringActive = !0, monitoringInterval = setInterval(fetchPZEMAndRelayData, 5e3)) } function stopMonitoring() { monitoringInterval && (clearInterval(monitoringInterval), monitoringInterval = null, isMonitoringActive = !1) } document.addEventListener("visibilitychange", (() => { document.hidden ? stopMonitoring() : startMonitoring() })), window.addEventListener("beforeunload", stopMonitoring), startMonitoring(); import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js"; import { getDatabase, ref, set, onValue } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-database.js"; const db = getDatabase(initializeApp({ apiKey: "AIzaSyDi-2L7pOKJH1gOAJnSvhMfLUINRPTX7Yg", authDomain: "smart-building-3e5c1.firebaseapp.com", databaseURL: "https://smart-building-3e5c1-default-rtdb.asia-southeast1.firebasedatabase.app", projectId: "smart-building-3e5c1", storageBucket: "smart-building-3e5c1.appspot.com", messagingSenderId: "693247019169", appId: "1:693247019169:web:xxxxxx" })); let manualMode = !1, relay1ManualState = null, relay2ManualState = null, editMode = !1, editingId = null; const checkAutoMode = () => { if ((window.getDeviceStates?.() || {}).manualMode) return void (manualMode = !0); const e = 0 === relay1ManualState && 0 === relay2ManualState; e && manualMode ? (manualMode = !1, relay1ManualState = relay2ManualState = null, setTimeout((() => updateLemburStatusDanRelay()), 2500)) : e || null === relay1ManualState && null === relay2ManualState || (manualMode = !0) }, manualRelayControl = (e, t) => { 1 === e ? relay1ManualState = t : 2 === e && (relay2ManualState = t), set(ref(db, `/relayControl/relay${e}`), t), checkAutoMode() }, cleanTime = e => e?.match(/^(\d{1,2}:\d{2})/)?.[1] + ":00" || null, isOvertimeActive = e => { const t = new Date; if (1 === e.status) return !0; const a = new Date(`${e.overtime_date}T${cleanTime(e.start_time)}`), n = e.end_time ? new Date(`${e.overtime_date}T${cleanTime(e.end_time)}`) : null; return 2 === e.status ? n && t < n : 0 === e.status && t >= a && (!n || t < n) }, getStatusInfo = e => { const t = { 1: { text: "Sedang Berjalan", class: "warning" }, 2: { text: "Selesai", class: "success" }, 0: { text: "Belum Mulai", class: "secondary" } }; if (isOvertimeActive(e) && 1 !== e.status) return { displayStatus: 1, statusText: "Sedang Berjalan", statusClass: "warning" }; const a = t[e.status] || t[0]; return { displayStatus: e.status, statusText: a.text, statusClass: a.class } }, apiRequest = async (e, t = {}) => { const a = document.querySelector('meta[name="csrf-token"]')?.getAttribute("content"), n = { headers: { "X-CSRF-TOKEN": a || "", "Content-Type": "application/json", ...t.headers } }, i = await fetch(e, { ...n, ...t }); if (!i.ok) throw new Error(`Server Error: ${i.status}`); return i.json() }, updateTable = e => { const t = document.getElementById("lembur-tbody"); t && (t.innerHTML = e?.length ? e.map(((e, t) => { const { displayStatus: a, statusText: n, statusClass: i } = getStatusInfo(e), r = new Date(e.overtime_date).toLocaleDateString("id-ID", { day: "2-digit", month: "2-digit", year: "numeric" }), s = [`<button class="btn btn-sm btn-primary me-1" onclick="editOvertime(${e.id})"><i class="fas fa-edit"></i> Edit</button>`, `<button class="btn btn-sm btn-danger me-1" onclick="deleteOvertime(${e.id})"><i class="fas fa-trash"></i> Delete</button>`, 1 === a ? `<button class="btn btn-sm btn-warning" onclick="cutOffOvertime(${e.id})"><i class="fas fa-stop"></i> Cut-off</button>` : ""].join(""); return `<tr>\n            <td>${t + 1}</td>\n            <td>${e.division_name}</td>\n            <td>${e.employee_name}</td>\n            <td>${r}</td>\n            <td>${e.start_time}</td>\n            <td>${e.end_time ?? "-"}</td>\n            <td>${e.duration ?? "-"}</td>\n            <td><span class="badge bg-${i}">${n}</span></td>\n            <td>${e.notes ?? "-"}</td>\n            <td>${s}</td>\n        </tr>` })).join("") : '<tr><td colspan="10" class="text-center">Belum ada data lembur.</td></tr>') }, updateLemburStatusDanRelay = async () => { if ((window.getDeviceStates?.() || {}).manualMode || manualMode) try { const e = await apiRequest(`/overtime/status-check?_=${Date.now()}`); updateTable(e.overtimes) } catch (e) { } else try { const e = await apiRequest(`/overtime/status-check?_=${Date.now()}`); updateTable(e.overtimes); const t = e.overtimes?.some(isOvertimeActive) || !1 ? 1 : 0; set(ref(db, "/relayControl/relay1"), t), set(ref(db, "/relayControl/relay2"), t) } catch (e) { } }, getFormData = () => { const e = ["division_name", "employee_name", "overtime_date", "start_time", "end_time", "notes"].reduce(((e, t) => ({ ...e, [t]: document.getElementById(t) })), {}); return { division_name: e.division_name.value.trim(), employee_name: e.employee_name.value.trim(), overtime_date: e.overtime_date.value, start_time: e.start_time.value, end_time: e.end_time?.value || null, notes: e.notes?.value?.trim() || null } }, validateForm = () => { const e = getFormData(), t = [[e.division_name, "Nama divisi harus diisi"], [e.employee_name, "Nama karyawan harus diisi"], [e.overtime_date, "Tanggal lembur harus diisi"], [e.start_time, "Waktu mulai harus diisi"]]; for (const [e, a] of t) if (!e) return alert(a), !1; if (!/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(e.start_time)) return alert("Format waktu mulai tidak valid"), !1; if (e.end_time && !/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(e.end_time)) return alert("Format waktu selesai tidak valid"), !1; if (e.end_time) { const t = new Date(`${e.overtime_date}T${e.start_time}`); if (new Date(`${e.overtime_date}T${e.end_time}`) <= t) return alert("Waktu selesai harus lebih besar dari waktu mulai"), !1 } return !0 }, editOvertime = async e => { editMode = !0, editingId = e; try { const t = await apiRequest(`/overtime/${e}/edit`); if (!t.success) return; const a = t.overtime;["division_name", "employee_name", "overtime_date", "start_time", "end_time", "notes"].forEach((e => { const t = document.getElementById(e); t && ("overtime_date" === e ? t.value = a[e]?.slice(0, 10) || "" : e.includes("time") ? t.value = a[e]?.substring(0, 5) || "" : t.value = a[e] || "") })); const n = document.querySelector('form[action*="overtime"]'); if (n) { n.action = `/overtime/${e}/update`; const t = n.querySelector('button[type="submit"]'); if (t && (t.textContent = "Update", t.className = t.className.replace("btn-primary", "btn-success")), !n.querySelector(".btn-cancel")) { const e = document.createElement("button"); Object.assign(e, { type: "button", className: "btn btn-secondary btn-cancel ms-2", textContent: "Cancel", onclick: cancelEdit }), t.parentNode.appendChild(e) } } document.querySelector(".panel-heading h1")?.scrollIntoView({ behavior: "smooth" }) } catch (e) { alert("Gagal memuat data untuk edit") } }, cancelEdit = () => { editMode = !1, editingId = null; const e = document.querySelector("form"); if (e) { e.reset(), e.action = e.action.replace(/\/overtime\/\d+\/update/, "/overtime/store"); const t = e.querySelector('button[type="submit"]'); t && (t.textContent = "Simpan", t.className = t.className.replace("btn-success", "btn-primary")), e.querySelector(".btn-cancel")?.remove() } document.getElementById("overtime_date").value = (new Date).toISOString().split("T")[0] }, deleteOvertime = async e => { if (confirm("Apakah Anda yakin ingin menghapus data lembur ini?")) try { const t = await apiRequest(`/overtime/${e}/delete`, { method: "DELETE" }); alert(t.success ? "Data lembur berhasil dihapus" : "Gagal menghapus data lembur"), t.success && updateLemburStatusDanRelay() } catch (e) { alert("Gagal menghapus data lembur") } }, cutOffOvertime = async e => { if (confirm("Apakah Anda yakin ingin menghentikan lembur ini sekarang?")) try { const t = await apiRequest(`/overtime/${e}/cutoff`, { method: "POST" }); alert(t.success ? "Lembur berhasil dihentikan" : t.message || "Gagal menghentikan lembur"), t.success && setTimeout((() => updateLemburStatusDanRelay()), 4e3) } catch (e) { alert("Terjadi kesalahan saat menghentikan lembur") } }, handleEditSubmit = async () => { if (validateForm()) try { const e = await apiRequest(`/overtime/${editingId}/update`, { method: "PUT", body: JSON.stringify(getFormData()) }); e.success ? (alert("Data lembur berhasil diupdate"), cancelEdit(), setTimeout((() => updateLemburStatusDanRelay()), 4e3), [7e3, 1e4].forEach((e => setTimeout((() => forceRefreshRelayState()), e)))) : alert(e.message || "Gagal mengupdate data lembur") } catch (e) { alert("Terjadi kesalahan saat mengupdate data lembur") } }, forceRefreshRelayState = async () => { if (!(window.getDeviceStates?.() || {}).manualMode && !manualMode) try { const e = await apiRequest(`/overtime/status-check?_=${Date.now()}`); if (!e.overtimes?.length) return set(ref(db, "/relayControl/relay1"), 0), void set(ref(db, "/relayControl/relay2"), 0); const t = e.overtimes.some(isOvertimeActive) ? 1 : 0; set(ref(db, "/relayControl/relay1"), t), set(ref(db, "/relayControl/relay2"), t) } catch (e) { } }, updateSwitchState = (e, t) => { const a = document.querySelector(`input[name="${e}"][type="checkbox"].device-switch`); if (a && a.checked !== (1 === t)) { a.checked = 1 === t; const n = a.closest(".d-flex")?.querySelector(".indicator"); if (n) { const a = "sos" === e ? 1 === t ? "red" : "grey" : 1 === t ? "green" : "grey"; n.style.backgroundColor = a } } }, setupFirebaseListeners = () => { ["relay1", "relay2", "sos"].forEach((e => { onValue(ref(db, `/relayControl/${e}`), (t => { updateSwitchState(e, t.val()) })) })) }, showModeStatus = () => { const e = document.getElementById("mode-status"); if (!e) return; const t = window.getDeviceStates?.() || {}, a = document.querySelector('input[name="sos"][type="checkbox"].device-switch')?.checked; if (a) e.textContent = "Mode SOS Aktif - Semua Relay ON", e.className = "badge bg-danger"; else if (t.manualMode) { const a = []; 1 === t.relay1 && a.push("ITMS 1"), 1 === t.relay2 && a.push("ITMS 2"), e.textContent = `Mode Manual Aktif (${a.join(", ") || "Semua OFF"})`, e.className = "badge bg-warning" } else if (manualMode) { const t = []; 1 === relay1ManualState && t.push("ITMS 1"), 1 === relay2ManualState && t.push("ITMS 2"), e.textContent = `Mode Manual Aktif (${t.join(", ") || "Semua OFF"})`, e.className = "badge bg-warning" } else e.textContent = "Mode Otomatis Aktif (Berdasarkan Jadwal Lembur)", e.className = "badge bg-success" }, resetToAutoMode = () => { manualMode = !1, relay1ManualState = relay2ManualState = null, window.resetDeviceToAutoMode && window.resetDeviceToAutoMode(), updateLemburStatusDanRelay() }; function getRandomFloat(e, t, a = 2) { const n = (Math.random() * (t - e) + e).toFixed(a); return parseFloat(n) } function updateSimulasiData() { const e = getRandomFloat(120, 250), t = getRandomFloat(200, 400), a = e + t + getRandomFloat(50, 150), n = getRandomFloat(25, 31); document.getElementById("lampu-value").textContent = e + " KWh", document.getElementById("ac-value").textContent = t + " KWh", document.getElementById("listrik-value").textContent = a.toFixed(2) + " KWh", document.getElementById("suhu-value").textContent = n + " °C" } document.addEventListener("DOMContentLoaded", (() => { setTimeout((() => { const e = document.querySelector('form[action*="overtime"]'); e && e.addEventListener("submit", (e => { editMode && (e.preventDefault(), handleEditSubmit()) })), setupFirebaseListeners(), updateLemburStatusDanRelay() }), 1500); let e = setInterval(updateLemburStatusDanRelay, 15e3), t = setInterval(showModeStatus, 5e3); document.addEventListener("visibilitychange", (() => { document.hidden ? (clearInterval(e), clearInterval(t)) : (e = setInterval(updateLemburStatusDanRelay, 15e3), t = setInterval(showModeStatus, 5e3)) })), window.addEventListener("beforeunload", (() => { clearInterval(e), clearInterval(t) })) })), Object.assign(window, { updateLemburStatusDanRelay: updateLemburStatusDanRelay, manualRelayControl: manualRelayControl, resetToAutoMode: resetToAutoMode, editOvertime: editOvertime, deleteOvertime: deleteOvertime, cutOffOvertime: cutOffOvertime, cancelEdit: cancelEdit, forceRefreshRelayState: forceRefreshRelayState, debugOvertimeStatus: e => e?.some(isOvertimeActive) || !1, debugCurrentOvertimeState: () => apiRequest(`/overtime/status-check?_=${Date.now()}`).then((e => { e.overtimes })).catch((e => { })), checkModeStatus: () => ({ manualMode: manualMode, relay1ManualState: relay1ManualState, relay2ManualState: relay2ManualState, editMode: editMode, editingId: editingId }) }), updateSimulasiData(); let simulationInterval = setInterval(updateSimulasiData, 12e4); document.addEventListener("visibilitychange", (() => { document.hidden ? clearInterval(simulationInterval) : simulationInterval = setInterval(updateSimulasiData, 12e4) })), window.addEventListener("beforeunload", (() => { clearInterval(simulationInterval) })), document.addEventListener("DOMContentLoaded", (() => { const e = document.getElementById("current-timestamp"), t = () => { e && (e.textContent = (new Date).toLocaleString("id-ID", { year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit", second: "2-digit", hour12: !1 })) }, a = (e, t) => { const a = document.getElementById(`status-${e}`); a && (a.className = "status-indicator " + ("offline" === t ? "offline" : "")) }, n = () => { document.querySelectorAll('[id^="camera-"]').forEach((e => { (e => { const t = document.getElementById(`camera-${e}`), n = document.getElementById(`loading-${e}`); if (!t || !n) return; n.style.display = "flex"; const i = t.src.split("?")[0] + "?t=" + Date.now(); t.addEventListener("load", (() => { n.style.display = "none", a(e, "online") }), { once: !0 }), t.addEventListener("error", (() => { n.style.display = "none", a(e, "offline") }), { once: !0 }), t.src = i })(e.id.replace("camera-", "")) })) }; let i = setInterval(t, 1e3), r = setInterval(n, 6e4); document.addEventListener("visibilitychange", (() => { document.hidden ? (clearInterval(i), clearInterval(r)) : (i = setInterval(t, 1e3), r = setInterval(n, 6e4)) })), window.addEventListener("beforeunload", (() => { clearInterval(i), clearInterval(r) })), t(), document.querySelectorAll('[id^="camera-"]').forEach((e => { const t = e.id.replace("camera-", ""); e.addEventListener("load", (() => a(t, "online"))), e.addEventListener("error", (() => a(t, "offline"))) })), window.refreshAllCameras = n }));
